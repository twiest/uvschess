#summary Suggested layout of assignments for students using UvsChess

= Introduction =
Writing a chess AI can be intimidating for many students, especially when they're given everything all at once. We want to break it down and give students weekly deliverables. By doing so, it will help them know where to start and in what order things need to be done.

== Week 1 - Random AI ==

The student should be able to deliver a working and valid AI and the end of week one. The AI must meet the following requirements. The AI must:
 * Compile and implement IChessAI interface
 * Be playable
 * Validate the opponents moves `IsValidMove()`
 * Generate a list of all possible valid moves for a given chess board
 * Return a random move from the list of possible moves `GetNextMove()`
 * Implement the Profiler for debugging purposes [http://code.google.com/p/uvschess/wiki/ProfilerHowTo Profiler Tutorial]
 * Implement the Decision Tree for debugging purposes [http://code.google.com/p/uvschess/wiki/DecisionTreeHowTo Decision Tree Tutorial]


== Week 2 - Greedy AI ==

The student should deliver an AI that meets all of Random AI's requirements, plus these additional requirements. The AI must:
 * Use heuristics to evaluate a given chess board and assign it a point value.
 * Evaluate all the possible moves for a given chess board and select the best choice.
 
Note that the AI does not look ahead at all. At this point, it is still only looking at the current move.

== Week 3 - Mini-Max AI ==

The student should deliver an AI that meets all of Greedy AI and Random AI's requirements, plus the following additional requirements. The AI must:
 * Generate a tree of future moves and opponents moves.
 * Use the Mini-Max algorithm to select nodes to visit.
 * Use Alpha-Beta pruning to prune unwanted or unnecessary nodes from the tree.



